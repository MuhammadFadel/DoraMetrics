@using Data.Entities
@model Project

@inject IJsonHelper Json
@{                 
    ViewData["Title"] = "Gitlab Project Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>ProjectDetails</h1>

<div>
    <h4>ProjectDto</h4>
    <hr />    
            
    <dl class="row">        
        <dt class = "col-sm-2">            
            @if (!String.IsNullOrEmpty(Model.AvatarUrl))
            { 
                <img src="@Model.AvatarUrl" class="card-img-top" >
            }else
            {
                <img src="~/581057-200.png" class="card-img-top" >
            }
                
        </dt>      
        <dd class = "col-sm-10">
            
        </dd>        
        <dt class = "col-sm-2">
            Parent ID            
        </dt>
        <dd class = "col-sm-10">
            @if(Model.GroupId != 0)
            {
                <a asp-controller="Home" asp-action="GitlabGroupDetails" asp-route-id="@Model.GroupId"
							   class="btn btn-link text-left form-control">@Model.GroupId</a>
            }else{
                @Html.Raw("None");
            }
            
        </dd>
        <dt class = "col-sm-2">
            Name
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class = "col-sm-2">
            Description
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class = "col-sm-2">
            Created At
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CreatedAt)
        </dd>
        <dt class = "col-sm-2">
            Repo Url            
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.HttpUrlToRepo)
        </dd>
        <dt class = "col-sm-2">
            last activity             
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.LastActivityAt)
        </dd>                             
        <dt class = "col-sm-2">
            Default Branch           
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DefaultBranch)
        </dd>          
    </dl>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    <div style="text-align: center">  
        <canvas id="LineCanvas" width="60px" height="30px" ></canvas>  
    </div>

    <script>  
        var DoughnutChartData =  
            {  
                labels: @Json.Serialize( Model.Metrics.Where(c => c.MetricType == Data.Enums.MetricType.DeploymentFrequency
                        && c.ProjectType == Data.Enums.ProjectType.Group).Select(d => d.Date)),  

                datasets: [{  
                    label: 'Deployment Frequency',                      
                    backgroundColor: "#f990a7",
                    borderColor: "#f990a7",
                   borderWidth: 2,  
                    data: @Json.Serialize( Model.Metrics.Where(c => c.MetricType == Data.Enums.MetricType.DeploymentFrequency
                        && c.ProjectType == Data.Enums.ProjectType.Group).Select(d => d.Value))  
                },
                {
                    label: 'Change Failure Rate',                      
                    backgroundColor:"#aad2ed",
                    borderColor: "#aad2ed",
                    borderWidth: 2,  
                    data: @Json.Serialize( Model.Metrics.Where(c => c.MetricType == Data.Enums.MetricType.ChangeFailureRate
                        && c.ProjectType == Data.Enums.ProjectType.Group).Select(d => d.Value))
                    },
                    
                    {
                    label: 'Lead Time For Changes',                      
                    backgroundColor: "#9966FF",  
                    borderColor: "#9966FF",
                    borderWidth: 2,  
                    data: @Json.Serialize( Model.Metrics.Where(c => c.MetricType == Data.Enums.MetricType.LeadTimeForChanges
                        && c.ProjectType == Data.Enums.ProjectType.Group).Select(d => d.Value))
                    },
                    
                    {
                    label: 'Time To Restore Service',                      
                    backgroundColor: "#99e5e5",  
                    borderColor: "#99e5e5",
                    borderWidth: 2,  
                    data: @Json.Serialize( Model.Metrics.Where(c => c.MetricType == Data.Enums.MetricType.TimeToRestoreService
                        && c.ProjectType == Data.Enums.ProjectType.Group).Select(d => d.Value))
                    }]  
            };  
  
            window.onload = function () {  
                var ctx1 = document.getElementById("LineCanvas").getContext("2d");  
                window.myBar = new Chart(ctx1,  
                    {  
                        type: 'line',  
                        data: DoughnutChartData,  
                        options:  
                            {  
                                scales: {
                                            y: {
                                                beginAtZero: true
                                            }
                                        },
                                title:  
                                {  
                                    display: true,  
                                    text: "Dora Metrics Analytics"  
                                },  
                                responsive: true,  
                                maintainAspectRatio: true  
                            }  
                    });  
            }  
    </script>
        
<div>    
    <a asp-action="Index">Back to List</a>
</div>