using System;
using Microsoft.EntityFrameworkCore.Migrations;

namespace DoraMetrics.Migrations
{
    public partial class IntializeProjectModels : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AccessInfos",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccessLevel = table.Column<int>(type: "int", nullable: true),
                    NotificationLevel = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccessInfos", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Links",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Self = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Issues = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    MergeRequests = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RepoBranches = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Labels = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Events = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Members = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClusterAgents = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Links", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Metrics",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Metrics", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Owners",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OwnerGitlabId = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Username = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    State = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Avatar_url = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Web_url = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Owners", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProjectNamespaces",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GitlabNamespaceId = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Path = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Kind = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FullPath = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    AvatarUrl = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    WebUrl = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectNamespaces", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Statistics",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CommitCount = table.Column<int>(type: "int", nullable: false),
                    StorageSize = table.Column<int>(type: "int", nullable: false),
                    RpositorySize = table.Column<int>(type: "int", nullable: false),
                    WikiSize = table.Column<int>(type: "int", nullable: false),
                    LfsObjectsSize = table.Column<int>(type: "int", nullable: false),
                    JobArtifactsSize = table.Column<int>(type: "int", nullable: false),
                    PipelineArtifactsSize = table.Column<int>(type: "int", nullable: false),
                    PackagesSize = table.Column<int>(type: "int", nullable: false),
                    SnippetsSize = table.Column<int>(type: "int", nullable: false),
                    UploadsSize = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Statistics", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MetricData",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Date = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Value = table.Column<double>(type: "float", nullable: true),
                    MetricsId = table.Column<int>(type: "int", nullable: true),
                    MetricsId1 = table.Column<int>(type: "int", nullable: true),
                    MetricsId2 = table.Column<int>(type: "int", nullable: true),
                    MetricsId3 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MetricData", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MetricData_Metrics_MetricsId",
                        column: x => x.MetricsId,
                        principalTable: "Metrics",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MetricData_Metrics_MetricsId1",
                        column: x => x.MetricsId1,
                        principalTable: "Metrics",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MetricData_Metrics_MetricsId2",
                        column: x => x.MetricsId2,
                        principalTable: "Metrics",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MetricData_Metrics_MetricsId3",
                        column: x => x.MetricsId3,
                        principalTable: "Metrics",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Permissions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OwnerId = table.Column<int>(type: "int", nullable: true),
                    ProjectAccessId = table.Column<int>(type: "int", nullable: true),
                    GroupAccessId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Permissions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Permissions_AccessInfos_GroupAccessId",
                        column: x => x.GroupAccessId,
                        principalTable: "AccessInfos",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Permissions_AccessInfos_ProjectAccessId",
                        column: x => x.ProjectAccessId,
                        principalTable: "AccessInfos",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Permissions_Owners_OwnerId",
                        column: x => x.OwnerId,
                        principalTable: "Owners",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Projects",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GitlabProjectId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DefaultBranch = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Visibility = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SshUrlToRepo = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    HttpUrlToRepo = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    WebUrl = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ReadmeUrl = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    OwnerId = table.Column<int>(type: "int", nullable: false),
                    MetricsId = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    NameWithNamespace = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Path = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PathWithNamespace = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IssuesEnabled = table.Column<bool>(type: "bit", nullable: true),
                    OpenIssuesCount = table.Column<int>(type: "int", nullable: false),
                    MergeRequestsEnabled = table.Column<bool>(type: "bit", nullable: true),
                    JobsEnabled = table.Column<bool>(type: "bit", nullable: true),
                    WikiEnabled = table.Column<bool>(type: "bit", nullable: true),
                    SnippetsEnabled = table.Column<bool>(type: "bit", nullable: true),
                    CanCreateMergeRequestIn = table.Column<bool>(type: "bit", nullable: true),
                    ResolveOutdatedDiffDiscussions = table.Column<bool>(type: "bit", nullable: true),
                    ContainerRegistryEnabled = table.Column<bool>(type: "bit", nullable: true),
                    ContainerRegistryAccessLevel = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecurityAndComplianceAccessLevel = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastActivityAt = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatorId = table.Column<int>(type: "int", nullable: false),
                    ImportUrl = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ImportType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    NamespaceId = table.Column<int>(type: "int", nullable: false),
                    ImportStatus = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Archived = table.Column<bool>(type: "bit", nullable: true),
                    AvatarUrl = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SharedRunnersEnabled = table.Column<bool>(type: "bit", nullable: true),
                    ForksCount = table.Column<int>(type: "int", nullable: false),
                    StarCount = table.Column<int>(type: "int", nullable: false),
                    RunnersToken = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CiDefaultGitDepth = table.Column<int>(type: "int", nullable: false),
                    CiForwardDeploymentEnabled = table.Column<bool>(type: "bit", nullable: true),
                    PublicJobs = table.Column<bool>(type: "bit", nullable: true),
                    OnlyAllowMergeIfPipelineSucceeds = table.Column<bool>(type: "bit", nullable: true),
                    AllowMergeOnSkippedPipeline = table.Column<bool>(type: "bit", nullable: true),
                    RestrictUserDefinedVariables = table.Column<bool>(type: "bit", nullable: true),
                    OnlyAllowMergeIfAllDiscussionsAreResolved = table.Column<bool>(type: "bit", nullable: true),
                    RemoveSourceBranchAfterMerge = table.Column<bool>(type: "bit", nullable: true),
                    RequestAccessEnabled = table.Column<bool>(type: "bit", nullable: true),
                    MergeMethod = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SquashOption = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    AutocloseReferencedIssues = table.Column<bool>(type: "bit", nullable: true),
                    SuggestionCommitMessage = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    MergeCommitTemplate = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SquashCommitTemplate = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    MarkedForDeletionAt = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    MarkedForDeletionOn = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StatisticsId = table.Column<int>(type: "int", nullable: false),
                    ContainerRegistryImagePrefix = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LinksId = table.Column<int>(type: "int", nullable: false),
                    ImportError = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PermissionsId = table.Column<int>(type: "int", nullable: false),
                    AutoDevopsEnabled = table.Column<bool>(type: "bit", nullable: true),
                    AutoDevopsDeployStrategy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RepositoryStorage = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ApprovalsBeforeMerge = table.Column<int>(type: "int", nullable: true),
                    Mirror = table.Column<bool>(type: "bit", nullable: true),
                    MirrorUserId = table.Column<int>(type: "int", nullable: true),
                    MirrorTriggerBuilds = table.Column<bool>(type: "bit", nullable: true),
                    OnlyMirrorProtectedBranches = table.Column<bool>(type: "bit", nullable: true),
                    MirrorOverwritesDivergedBranches = table.Column<bool>(type: "bit", nullable: true),
                    ExternalAuthorizationClassificationLabel = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PackagesEnabled = table.Column<bool>(type: "bit", nullable: true),
                    ServiceDeskEnabled = table.Column<bool>(type: "bit", nullable: true),
                    ServiceDeskAddress = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Projects", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Projects_Links_LinksId",
                        column: x => x.LinksId,
                        principalTable: "Links",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Projects_Metrics_MetricsId",
                        column: x => x.MetricsId,
                        principalTable: "Metrics",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Projects_Owners_OwnerId",
                        column: x => x.OwnerId,
                        principalTable: "Owners",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Projects_Permissions_PermissionsId",
                        column: x => x.PermissionsId,
                        principalTable: "Permissions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Projects_ProjectNamespaces_NamespaceId",
                        column: x => x.NamespaceId,
                        principalTable: "ProjectNamespaces",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Projects_Statistics_StatisticsId",
                        column: x => x.StatisticsId,
                        principalTable: "Statistics",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_MetricData_MetricsId",
                table: "MetricData",
                column: "MetricsId");

            migrationBuilder.CreateIndex(
                name: "IX_MetricData_MetricsId1",
                table: "MetricData",
                column: "MetricsId1");

            migrationBuilder.CreateIndex(
                name: "IX_MetricData_MetricsId2",
                table: "MetricData",
                column: "MetricsId2");

            migrationBuilder.CreateIndex(
                name: "IX_MetricData_MetricsId3",
                table: "MetricData",
                column: "MetricsId3");

            migrationBuilder.CreateIndex(
                name: "IX_Permissions_GroupAccessId",
                table: "Permissions",
                column: "GroupAccessId");

            migrationBuilder.CreateIndex(
                name: "IX_Permissions_OwnerId",
                table: "Permissions",
                column: "OwnerId");

            migrationBuilder.CreateIndex(
                name: "IX_Permissions_ProjectAccessId",
                table: "Permissions",
                column: "ProjectAccessId");

            migrationBuilder.CreateIndex(
                name: "IX_Projects_LinksId",
                table: "Projects",
                column: "LinksId");

            migrationBuilder.CreateIndex(
                name: "IX_Projects_MetricsId",
                table: "Projects",
                column: "MetricsId");

            migrationBuilder.CreateIndex(
                name: "IX_Projects_NamespaceId",
                table: "Projects",
                column: "NamespaceId");

            migrationBuilder.CreateIndex(
                name: "IX_Projects_OwnerId",
                table: "Projects",
                column: "OwnerId");

            migrationBuilder.CreateIndex(
                name: "IX_Projects_PermissionsId",
                table: "Projects",
                column: "PermissionsId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Projects_StatisticsId",
                table: "Projects",
                column: "StatisticsId");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "MetricData");

            migrationBuilder.DropTable(
                name: "Projects");

            migrationBuilder.DropTable(
                name: "Links");

            migrationBuilder.DropTable(
                name: "Metrics");

            migrationBuilder.DropTable(
                name: "Permissions");

            migrationBuilder.DropTable(
                name: "ProjectNamespaces");

            migrationBuilder.DropTable(
                name: "Statistics");

            migrationBuilder.DropTable(
                name: "AccessInfos");

            migrationBuilder.DropTable(
                name: "Owners");
        }
    }
}
