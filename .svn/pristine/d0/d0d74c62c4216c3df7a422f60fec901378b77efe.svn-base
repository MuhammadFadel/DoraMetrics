using AutoMapper;
using DoraMetrics.Data;
using DoraMetrics.DTOs;
using DoraMetrics.Helpers;
using DoraMetrics.Models;
using DoraMetrics.Services.IServices;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace DoraMetrics.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly IConfiguration _config;        
        private readonly IGitlabService _gitlabService;
        private readonly IMapper _mapper;
        public readonly IProjectRepo _project;
        private readonly IUnitOfWork _db;

        public HomeController(ILogger<HomeController> logger, IConfiguration configuration, IGitlabService gitlabService, IMapper mapper, IProjectRepo project, IUnitOfWork db)
        {
            _logger = logger;
            _config = configuration;
            _gitlabService = gitlabService;
            _mapper = mapper;
            _project = project;
            _db = db;
        }

        public async Task<IActionResult> Index()
        {           
            var accessToken = _config.GetSection("GitlabService:ApiToken").Value;
            var response = await _gitlabService.GetProjectsAsync<ApiResponse>(accessToken);
            if (response != null && response.IsSuccess)
            {
                var projectsDto = JsonConvert.DeserializeObject<List<GitlabProjectDto>>(Convert.ToString(response.Result));
                var projects = _mapper.Map<IEnumerable<Project>>(projectsDto);

                foreach (var project in projects)
                {
                    var dbProject = await _project.GetProjectWithGitlabId(project.GitlabProjectId);
                    if (dbProject != null)
                    {
                        dbProject.MappingUpdates(project, true);                        
                        _db.Update(dbProject);
                    }
                    else                    
                        _db.Add(project);                                        
                }

                try
                {
                    await _db.SaveAll();
                    return View(projects);
                }
                catch (Exception ex)
                {

                    throw new Exception(ex.Message);
                }

            }
            return View();
        }

        public async Task<IActionResult> GitlabProjects()
        {            
            var accessToken = _config.GetSection("GitlabService:ApiToken").Value;
            var response = await _gitlabService.GetProjectsAsync<ApiResponse>(accessToken);
            if (response != null && response.IsSuccess)
            {
                var projectsDto = JsonConvert.DeserializeObject<List<GitlabProjectDto>>(Convert.ToString(response.Result));
                var projects = _mapper.Map<IEnumerable<Project>>(projectsDto);
                return View(projects);
            }
            return View();
        }        

        public async Task<List<MetricValueDto>> GitlabProjectChangeFailureRate(int id)
        {
            var accessToken = _config.GetSection("GitlabService:ApiToken").Value;
            var projectChangeFailureRateResponse = await _gitlabService.GetProjectChangeFailureRate<ApiResponse>(id, accessToken);
            if (projectChangeFailureRateResponse != null && projectChangeFailureRateResponse.IsSuccess)
            {                
                var ChangeFailureRate =
                    JsonConvert.DeserializeObject<List<MetricValueDto>>(Convert.ToString(projectChangeFailureRateResponse.Result));
                return ChangeFailureRate;
            }
            return null;
        }
        public async Task<List<MetricValueDto>> GitlabProjectDeploymentFrequency(int id)
        {
            var accessToken = _config.GetSection("GitlabService:ApiToken").Value;
            var projectDeploymentFrequencyResponse = await _gitlabService.GetProjectDeploymentFrequency<ApiResponse>(id, accessToken);
            if (projectDeploymentFrequencyResponse != null && projectDeploymentFrequencyResponse.IsSuccess)
            {
                var DeploymentFrequency =
                    JsonConvert.DeserializeObject<List<MetricValueDto>>(Convert.ToString(projectDeploymentFrequencyResponse.Result));
                return DeploymentFrequency;
            }
            return null;
        }
        public async Task<List<MetricValueDto>> GitlabProjectLeadTimeForChanges(int id)
        {
            var accessToken = _config.GetSection("GitlabService:ApiToken").Value;
            var projectLeadTimeForChangesResponse = await _gitlabService.GetProjectLeadTimeForChanges<ApiResponse>(id, accessToken);
            if (projectLeadTimeForChangesResponse != null && projectLeadTimeForChangesResponse.IsSuccess)
            {
                var LeadTimeForChanges =
                    JsonConvert.DeserializeObject<List<MetricValueDto>>(Convert.ToString(projectLeadTimeForChangesResponse.Result));
                return LeadTimeForChanges;
            }
            return null;
        }
        public async Task<List<MetricValueDto>> GitlabProjectTimeToRestoreService(int id)
        {
            var accessToken = _config.GetSection("GitlabService:ApiToken").Value;
            var projectTimeToRestoreServiceResponse = await _gitlabService.GetProjectTimeToRestoreService<ApiResponse>(id, accessToken);
            if (projectTimeToRestoreServiceResponse != null && projectTimeToRestoreServiceResponse.IsSuccess)
            {
                var TimeToRestoreService =
                    JsonConvert.DeserializeObject<List<MetricValueDto>>(Convert.ToString(projectTimeToRestoreServiceResponse.Result));
                return TimeToRestoreService;
            }
            return null;
        }

        public async Task<IActionResult> GitlabProjectDetails(int id)
        {
            var accessToken = _config.GetSection("GitlabService:ApiToken").Value;
            var projectResponse = await _gitlabService.GetProjectByIdAsync<ApiResponse>(id, accessToken);
            if (projectResponse != null && projectResponse.IsSuccess)
            {
                var projectDto = JsonConvert.DeserializeObject<GitlabProjectDto>(Convert.ToString(projectResponse.Result));
                try
                {
                    projectDto.DoraMetricsAnalytics = new DoraMetricsAnalyticsDto();
                    projectDto.DoraMetricsAnalytics.ChangeFailureRate = await GitlabProjectChangeFailureRate(id);
                    projectDto.DoraMetricsAnalytics.DeploymentFrequency = await GitlabProjectDeploymentFrequency(id);
                    projectDto.DoraMetricsAnalytics.LeadTimeForChanges = await GitlabProjectLeadTimeForChanges(id);
                    projectDto.DoraMetricsAnalytics.TimeToRestoreService = await GitlabProjectTimeToRestoreService(id);

                    var project = _mapper.Map<Project>(projectDto);
                    return View(project);
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message);
                }                               
            }
            return View();
        }


        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}
