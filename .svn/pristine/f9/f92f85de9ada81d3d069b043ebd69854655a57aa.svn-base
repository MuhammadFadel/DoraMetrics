// <auto-generated />
using System;
using DoraMetrics.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DoraMetrics.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220522143304_IntializeProjectModels")]
    partial class IntializeProjectModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DoraMetrics.Models.AccessInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<int?>("NotificationLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccessInfos");
                });

            modelBuilder.Entity("DoraMetrics.Models.Links", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClusterAgents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Events")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Issues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Labels")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Members")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MergeRequests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepoBranches")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Self")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("DoraMetrics.Models.MetricData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MetricsId")
                        .HasColumnType("int");

                    b.Property<int?>("MetricsId1")
                        .HasColumnType("int");

                    b.Property<int?>("MetricsId2")
                        .HasColumnType("int");

                    b.Property<int?>("MetricsId3")
                        .HasColumnType("int");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MetricsId");

                    b.HasIndex("MetricsId1");

                    b.HasIndex("MetricsId2");

                    b.HasIndex("MetricsId3");

                    b.ToTable("MetricData");
                });

            modelBuilder.Entity("DoraMetrics.Models.Metrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("DoraMetrics.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerGitlabId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Web_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("DoraMetrics.Models.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupAccessId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectAccessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupAccessId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectAccessId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("DoraMetrics.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllowMergeOnSkippedPipeline")
                        .HasColumnType("bit");

                    b.Property<int?>("ApprovalsBeforeMerge")
                        .HasColumnType("int");

                    b.Property<bool?>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("AutoDevopsDeployStrategy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AutoDevopsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("AutocloseReferencedIssues")
                        .HasColumnType("bit");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CanCreateMergeRequestIn")
                        .HasColumnType("bit");

                    b.Property<int>("CiDefaultGitDepth")
                        .HasColumnType("int");

                    b.Property<bool?>("CiForwardDeploymentEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ContainerRegistryAccessLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ContainerRegistryEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ContainerRegistryImagePrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalAuthorizationClassificationLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForksCount")
                        .HasColumnType("int");

                    b.Property<int>("GitlabProjectId")
                        .HasColumnType("int");

                    b.Property<string>("HttpUrlToRepo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IssuesEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("JobsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LinksId")
                        .HasColumnType("int");

                    b.Property<string>("MarkedForDeletionAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarkedForDeletionOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MergeCommitTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MergeMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MergeRequestsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("MetricsId")
                        .HasColumnType("int");

                    b.Property<bool?>("Mirror")
                        .HasColumnType("bit");

                    b.Property<bool?>("MirrorOverwritesDivergedBranches")
                        .HasColumnType("bit");

                    b.Property<bool?>("MirrorTriggerBuilds")
                        .HasColumnType("bit");

                    b.Property<int?>("MirrorUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWithNamespace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NamespaceId")
                        .HasColumnType("int");

                    b.Property<bool?>("OnlyAllowMergeIfAllDiscussionsAreResolved")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnlyAllowMergeIfPipelineSucceeds")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnlyMirrorProtectedBranches")
                        .HasColumnType("bit");

                    b.Property<int>("OpenIssuesCount")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<bool?>("PackagesEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathWithNamespace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<bool?>("PublicJobs")
                        .HasColumnType("bit");

                    b.Property<string>("ReadmeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RemoveSourceBranchAfterMerge")
                        .HasColumnType("bit");

                    b.Property<string>("RepositoryStorage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RequestAccessEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("ResolveOutdatedDiffDiscussions")
                        .HasColumnType("bit");

                    b.Property<bool?>("RestrictUserDefinedVariables")
                        .HasColumnType("bit");

                    b.Property<string>("RunnersToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityAndComplianceAccessLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceDeskAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ServiceDeskEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("SharedRunnersEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("SnippetsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("SquashCommitTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SquashOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SshUrlToRepo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StarCount")
                        .HasColumnType("int");

                    b.Property<int>("StatisticsId")
                        .HasColumnType("int");

                    b.Property<string>("SuggestionCommitMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Visibility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("WikiEnabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LinksId");

                    b.HasIndex("MetricsId");

                    b.HasIndex("NamespaceId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PermissionsId")
                        .IsUnique();

                    b.HasIndex("StatisticsId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DoraMetrics.Models.ProjectNamespace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GitlabNamespaceId")
                        .HasColumnType("int");

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectNamespaces");
                });

            modelBuilder.Entity("DoraMetrics.Models.Statistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommitCount")
                        .HasColumnType("int");

                    b.Property<int>("JobArtifactsSize")
                        .HasColumnType("int");

                    b.Property<int>("LfsObjectsSize")
                        .HasColumnType("int");

                    b.Property<int>("PackagesSize")
                        .HasColumnType("int");

                    b.Property<int>("PipelineArtifactsSize")
                        .HasColumnType("int");

                    b.Property<int>("RpositorySize")
                        .HasColumnType("int");

                    b.Property<int>("SnippetsSize")
                        .HasColumnType("int");

                    b.Property<int>("StorageSize")
                        .HasColumnType("int");

                    b.Property<int>("UploadsSize")
                        .HasColumnType("int");

                    b.Property<int>("WikiSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("DoraMetrics.Models.MetricData", b =>
                {
                    b.HasOne("DoraMetrics.Models.Metrics", null)
                        .WithMany("ChangeFailureRate")
                        .HasForeignKey("MetricsId");

                    b.HasOne("DoraMetrics.Models.Metrics", null)
                        .WithMany("DeploymentFrequency")
                        .HasForeignKey("MetricsId1");

                    b.HasOne("DoraMetrics.Models.Metrics", null)
                        .WithMany("LeadTimeForChanges")
                        .HasForeignKey("MetricsId2");

                    b.HasOne("DoraMetrics.Models.Metrics", null)
                        .WithMany("TimeToRestoreService")
                        .HasForeignKey("MetricsId3");
                });

            modelBuilder.Entity("DoraMetrics.Models.Permissions", b =>
                {
                    b.HasOne("DoraMetrics.Models.AccessInfo", "GroupAccess")
                        .WithMany()
                        .HasForeignKey("GroupAccessId");

                    b.HasOne("DoraMetrics.Models.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("DoraMetrics.Models.AccessInfo", "ProjectAccess")
                        .WithMany()
                        .HasForeignKey("ProjectAccessId");

                    b.Navigation("GroupAccess");

                    b.Navigation("Owner");

                    b.Navigation("ProjectAccess");
                });

            modelBuilder.Entity("DoraMetrics.Models.Project", b =>
                {
                    b.HasOne("DoraMetrics.Models.Links", "Links")
                        .WithMany()
                        .HasForeignKey("LinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoraMetrics.Models.Metrics", "Metrics")
                        .WithMany()
                        .HasForeignKey("MetricsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoraMetrics.Models.ProjectNamespace", "Namespace")
                        .WithMany("Projects")
                        .HasForeignKey("NamespaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoraMetrics.Models.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoraMetrics.Models.Permissions", "Permissions")
                        .WithOne("Project")
                        .HasForeignKey("DoraMetrics.Models.Project", "PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoraMetrics.Models.Statistics", "Statistics")
                        .WithMany()
                        .HasForeignKey("StatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Links");

                    b.Navigation("Metrics");

                    b.Navigation("Namespace");

                    b.Navigation("Owner");

                    b.Navigation("Permissions");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("DoraMetrics.Models.Metrics", b =>
                {
                    b.Navigation("ChangeFailureRate");

                    b.Navigation("DeploymentFrequency");

                    b.Navigation("LeadTimeForChanges");

                    b.Navigation("TimeToRestoreService");
                });

            modelBuilder.Entity("DoraMetrics.Models.Permissions", b =>
                {
                    b.Navigation("Project");
                });

            modelBuilder.Entity("DoraMetrics.Models.ProjectNamespace", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
