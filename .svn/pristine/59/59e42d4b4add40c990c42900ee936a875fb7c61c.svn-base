using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace DoraMetrics.Models
{
    public class Project
    {
        [Key]
        public int Id { get; set; }
        public int GitlabProjectId { get; set; }                               
        public Metrics Metrics { get; set; }
        [ForeignKey("Namespace")]
        public int NamespaceId { get; set; }
        public ProjectNamespace Namespace { get; set; }                
        public Links Links { get; set; }        
        public Permissions Permissions { get; set; }
        public string Description { get; set; }
        public string DefaultBranch { get; set; }
        public string Visibility { get; set; }
        public string SshUrlToRepo { get; set; }
        public string HttpUrlToRepo { get; set; }
        public string WebUrl { get; set; }
        public string ReadmeUrl { get; set; }
        public string Name { get; set; }
        public string NameWithNamespace { get; set; }
        public string Path { get; set; }
        public string PathWithNamespace { get; set; }
        public bool? IssuesEnabled { get; set; }
        public int OpenIssuesCount { get; set; }
        public bool? MergeRequestsEnabled { get; set; }
        public bool? JobsEnabled { get; set; }
        public bool? WikiEnabled { get; set; }
        public bool? SnippetsEnabled { get; set; }
        public bool? CanCreateMergeRequestIn { get; set; }
        public bool? ResolveOutdatedDiffDiscussions { get; set; }
        public bool? ContainerRegistryEnabled { get; set; }
        public string ContainerRegistryAccessLevel { get; set; }
        public string SecurityAndComplianceAccessLevel { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime LastActivityAt { get; set; }
        public int CreatorId { get; set; }
        public string ImportUrl { get; set; }
        public string ImportType { get; set; }        
        public string ImportStatus { get; set; }
        public bool? Archived { get; set; }
        public string AvatarUrl { get; set; }
        public bool? SharedRunnersEnabled { get; set; }
        public int ForksCount { get; set; }
        public int StarCount { get; set; }
        public string RunnersToken { get; set; }
        public int CiDefaultGitDepth { get; set; }
        public bool? CiForwardDeploymentEnabled { get; set; }
        public bool? PublicJobs { get; set; }        
        public bool? OnlyAllowMergeIfPipelineSucceeds { get; set; }
        public bool? AllowMergeOnSkippedPipeline { get; set; }
        public bool? RestrictUserDefinedVariables { get; set; }
        public bool? OnlyAllowMergeIfAllDiscussionsAreResolved { get; set; }
        public bool? RemoveSourceBranchAfterMerge { get; set; }
        public bool? RequestAccessEnabled { get; set; }
        public string MergeMethod { get; set; }
        public string SquashOption { get; set; }
        public bool? AutocloseReferencedIssues { get; set; }
        public string SuggestionCommitMessage { get; set; }
        public string MergeCommitTemplate { get; set; }
        public string SquashCommitTemplate { get; set; }
        public string MarkedForDeletionAt { get; set; }
        public string MarkedForDeletionOn { get; set; }        
        public string ContainerRegistryImagePrefix { get; set; }        
        public string ImportError { get; set; }        
        public bool? AutoDevopsEnabled { get; set; }
        public string AutoDevopsDeployStrategy { get; set; }
        public string RepositoryStorage { get; set; }
        public int? ApprovalsBeforeMerge { get; set; }
        public bool? Mirror { get; set; }
        public int? MirrorUserId { get; set; }
        public bool? MirrorTriggerBuilds { get; set; }
        public bool? OnlyMirrorProtectedBranches { get; set; }
        public bool? MirrorOverwritesDivergedBranches { get; set; }
        public string ExternalAuthorizationClassificationLabel { get; set; }
        public bool? PackagesEnabled { get; set; }
        public bool? ServiceDeskEnabled { get; set; }
        public string ServiceDeskAddress { get; set; }
    }
}
