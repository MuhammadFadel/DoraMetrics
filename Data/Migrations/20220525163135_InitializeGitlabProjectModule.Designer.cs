// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220525163135_InitializeGitlabProjectModule")]
    partial class InitializeGitlabProjectModule
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Entities.AccessInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<int?>("NotificationLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccessInfos");
                });

            modelBuilder.Entity("Data.Entities.Links", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClusterAgents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Events")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Issues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Labels")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Members")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MergeRequests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("RepoBranches")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Self")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Links");
                });

            modelBuilder.Entity("Data.Entities.MetricData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChangeFailureRateId")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeploymentFrequencyId")
                        .HasColumnType("int");

                    b.Property<int?>("LeadTimeForChangesId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeToRestoreServiceId")
                        .HasColumnType("int");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChangeFailureRateId");

                    b.HasIndex("DeploymentFrequencyId");

                    b.HasIndex("LeadTimeForChangesId");

                    b.HasIndex("TimeToRestoreServiceId");

                    b.ToTable("MetricData");
                });

            modelBuilder.Entity("Data.Entities.Metrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("Data.Entities.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupAccessId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectAccessId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupAccessId");

                    b.HasIndex("ProjectAccessId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Data.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForksCount")
                        .HasColumnType("int");

                    b.Property<int>("GitlabProjectId")
                        .HasColumnType("int");

                    b.Property<string>("HttpUrlToRepo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWithNamespace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpenIssuesCount")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StarCount")
                        .HasColumnType("int");

                    b.Property<string>("Visibility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Data.Entities.Links", b =>
                {
                    b.HasOne("Data.Entities.Project", "Project")
                        .WithOne("Links")
                        .HasForeignKey("Data.Entities.Links", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Data.Entities.MetricData", b =>
                {
                    b.HasOne("Data.Entities.Metrics", null)
                        .WithMany("ChangeFailureRate")
                        .HasForeignKey("ChangeFailureRateId");

                    b.HasOne("Data.Entities.Metrics", null)
                        .WithMany("DeploymentFrequency")
                        .HasForeignKey("DeploymentFrequencyId");

                    b.HasOne("Data.Entities.Metrics", null)
                        .WithMany("LeadTimeForChanges")
                        .HasForeignKey("LeadTimeForChangesId");

                    b.HasOne("Data.Entities.Metrics", null)
                        .WithMany("TimeToRestoreService")
                        .HasForeignKey("TimeToRestoreServiceId");
                });

            modelBuilder.Entity("Data.Entities.Metrics", b =>
                {
                    b.HasOne("Data.Entities.Project", "Project")
                        .WithOne("Metrics")
                        .HasForeignKey("Data.Entities.Metrics", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Data.Entities.Permissions", b =>
                {
                    b.HasOne("Data.Entities.AccessInfo", "GroupAccess")
                        .WithMany()
                        .HasForeignKey("GroupAccessId");

                    b.HasOne("Data.Entities.AccessInfo", "ProjectAccess")
                        .WithMany()
                        .HasForeignKey("ProjectAccessId");

                    b.HasOne("Data.Entities.Project", "Project")
                        .WithOne("Permissions")
                        .HasForeignKey("Data.Entities.Permissions", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupAccess");

                    b.Navigation("Project");

                    b.Navigation("ProjectAccess");
                });

            modelBuilder.Entity("Data.Entities.Metrics", b =>
                {
                    b.Navigation("ChangeFailureRate");

                    b.Navigation("DeploymentFrequency");

                    b.Navigation("LeadTimeForChanges");

                    b.Navigation("TimeToRestoreService");
                });

            modelBuilder.Entity("Data.Entities.Project", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("Metrics");

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
